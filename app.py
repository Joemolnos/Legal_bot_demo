import streamlit as st
import os
import time
from rag_system import RAGSystem
from groq_client import GroqClient
from config import Config

# Oldal konfigur√°ci√≥
st.set_page_config(
    page_title="Magyar Jogi dokumentum lek√©rdez≈ë rendszer ‚Äì Dem√≥",
    page_icon="‚öñÔ∏è",
    layout="wide"
)

# CSS st√≠lus
st.markdown("""
<style>
/* Webfont √©s alap tipogr√°fia */
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
html, body, [class*="css"]  {
  font-family: 'Inter', system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, 'Helvetica Neue', Arial, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', sans-serif;
}

/* Sz√≠nv√°ltoz√≥k */
:root {
  --primary: #1f4e79;
  --primary-600: #173e60;
  --primary-700: #12344f;
  --muted: #667085;
  --stroke: #e5e7eb;
  --bg: #f7f9fc;
}

/* H√°tt√©r √©s kont√©ner */
.stApp {
  background: radial-gradient(60% 60% at 0% 0%, rgba(31,78,121,.08), transparent 60%),
              radial-gradient(50% 50% at 100% 0%, rgba(15,23,42,.06), transparent 50%),
              linear-gradient(180deg, #f7f9fc 0%, #ffffff 100%);
}
.block-container { padding-top: 1rem; }

/* Fejl√©c */
.main-header {
    font-size: 2.6rem;
    color: var(--primary);
    text-align: center;
    margin-bottom: 0.75rem;
    letter-spacing: .2px;
}

/* Hero szekci√≥ */
.hero {
  display: flex; align-items: center; justify-content: space-between; gap: 1rem;
  padding: 1.1rem 1.25rem;
  border-radius: 16px;
  color: #fff;
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-600) 55%, #0f172a 100%);
  box-shadow: 0 10px 30px rgba(31,78,121,.25);
  border: 1px solid rgba(255,255,255,.2);
  margin-bottom: 1.1rem;
}
.hero-title { font-size: 1.4rem; font-weight: 700; }
.hero-subtitle { font-size: .95rem; opacity: .95; }
.hero-badges { display: flex; gap: .4rem; align-items: center; }
.pill { padding: .25rem .6rem; border-radius: 999px; font-size: .75rem; font-weight: 600; border: 1px solid rgba(255,255,255,.35); background: rgba(255,255,255,.15); }

/* K√∂zponti kont√©nerek */
.card {
  background: #ffffff;
  border: 1px solid rgba(0,0,0,0.06);
  border-radius: 12px;
  padding: 1rem 1.25rem;
  box-shadow: 0 1px 2px rgba(0,0,0,0.04);
}

/* Spinner k√∂z√©pre */
.stSpinner > div > div { text-align: center; }

/* √Ållapot dobozok */
.success-box { padding: 0.9rem 1rem; border-radius: 10px; background-color: #e8f5e9; border: 1px solid #c8e6c9; color: #1b5e20; }
.error-box   { padding: 0.9rem 1rem; border-radius: 10px; background-color: #ffebee; border: 1px solid #ffcdd2; color: #b71c1c; }

/* Forr√°s doboz √©s badge-ek */
.source-box {
  padding: 0.9rem 1rem; border-radius: 12px; background: linear-gradient(180deg,#f6faff 0%,#eff6ff 100%);
  border: 1px solid #d6e7ff; margin: 0.5rem 0; box-shadow: 0 1px 2px rgba(16,24,40,.06);
}
.badge { display: inline-block; padding: 0.2rem 0.5rem; border-radius: 999px; font-size: 0.75rem; font-weight: 600; margin-right: .4rem; }
.badge-blue { background: #e6f0ff; color: var(--primary); }
.badge-gray { background: #eef1f5; color: #334155; }

/* Primary gomb st√≠lus ‚Äì gradiensekkel */
.stButton>button {
  border-radius: 12px; padding: 0.7rem 1rem; font-weight: 700;
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-700) 100%);
  color: #fff; border: 0; box-shadow: 0 6px 16px rgba(31,78,121,.28);
}
.stButton>button:hover { transform: translateY(-1px); box-shadow: 0 10px 20px rgba(31,78,121,.32); }
.stButton>button:active { transform: translateY(0); }

/* Textarea, input */
textarea, input, .stTextInput>div>div>input {
  border-radius: 12px !important; border: 1px solid #dbe2ea !important;
  box-shadow: 0 1px 2px rgba(16,24,40,.04) !important; background: #fff !important;
}

/* Tabs ‚Äì Pill st√≠lus */
.stTabs [role="tablist"] button[role="tab"] {
  border: 1px solid var(--stroke); border-radius: 999px; margin-right: .5rem; padding: .4rem .8rem;
  background: #fff; color: #0f172a; font-weight: 600;
}
.stTabs [role="tablist"] button[aria-selected="true"] {
  background: var(--primary); color: #fff; border-color: var(--primary-600);
}

/* Expander kin√©zet */
details {
  border: 1px solid var(--stroke); border-radius: 12px; background: #fff; box-shadow: 0 1px 2px rgba(16,24,40,.06);
}
details>summary { list-style: none; padding: .9rem 1rem; font-weight: 600; color: var(--primary); border-bottom: 1px solid transparent; }
details[open]>summary { border-bottom-color: var(--stroke); }

/* Sidebar h√°tt√©r */
[data-testid="stSidebar"] {
  background: linear-gradient(180deg, #f7f9fc 0%, #ffffff 60%, #f7f9fc 100%);
  border-right: 1px solid var(--stroke);
}

/* Seg√©d marg√≥k */
.mt-1 { margin-top: .5rem; }
.mb-1 { margin-bottom: .5rem; }
.mb-2 { margin-bottom: 1rem; }
.mb-3 { margin-bottom: 1.5rem; }
</style>
""", unsafe_allow_html=True)

@st.cache_resource
def initialize_rag_system(engine_key: str = "v1"):
    """A RAG rendszert inicializ√°lja √©s cache-eli."""
    with st.spinner('üîÑ Rendszer inicializ√°l√°sa... Ez az els≈ë ind√≠t√°skor t√∂bb percig is eltarthat, ha dokumentumokat kell feldolgozni.'):
        rag_system = RAGSystem()
        # Groq API meleg√≠t√©se (cold start elker√ºl√©s√©re)
        try:
            _ = rag_system.groq_client.test_connection()
        except Exception:
            pass
    return rag_system

def initialize_app_state():
    """Az alkalmaz√°s session state-j√©t inicializ√°lja."""
    if 'chat_history' not in st.session_state:
        st.session_state.chat_history = []

def main():
    # Fejl√©c
    st.markdown('<h1 class="main-header">‚öñÔ∏è Magyar jogi dokumentum lek√©rdez≈ë ‚Äì Dem√≥</h1>', unsafe_allow_html=True)
    # Hero szekci√≥
    st.markdown(
        '''
        <div class="hero">
          <div>
            <div class="hero-title">Gyors keres√©s, hivatkozott forr√°sokkal</div>
            <div class="hero-subtitle">RAG alap√∫ v√°laszok, oldal- √©s relevancia-jelz≈ëkkel</div>
          </div>
          <div class="hero-badges">
            <span class="pill">Demo</span>
            <span class="pill">RAG-alap√∫</span>
            <span class="pill">HU</span>
          </div>
        </div>
        ''',
        unsafe_allow_html=True
    )
    # Jogi √©s adatv√©delmi nyilatkozatok (√∂sszecsukhat√≥)
    with st.expander("‚ö†Ô∏è Jogi nyilatkozat (nem min≈ës√ºl jogi tan√°csad√°snak)"):
        st.markdown(
            """
            - Az alkalmaz√°s kiz√°r√≥lag bemutat√≥ jelleg≈±, t√°j√©koztat√≥ eszk√∂z. Nem min≈ës√ºl jogi tan√°csad√°snak vagy szakv√©lem√©nynek.
            - A haszn√°lat nem hoz l√©tre √ºgyv√©d‚Äì√ºgyf√©l jogviszonyt.
            - A v√°laszok generat√≠v nyelvi modell √°ltal k√©sz√ºlnek, tartalmazhatnak pontatlans√°gokat, hi√°nyoss√°gokat vagy elavult inform√°ci√≥t.
            - A kapott eredm√©nyeket minden esetben ellen≈ërizd hivatalos √©s hiteles forr√°sokban (pl. Nemzeti Jogszab√°lyt√°r).
            - A szolg√°ltat√≥ a haszn√°latb√≥l ered≈ë esetleges k√°rok√©rt felel≈ëss√©get nem v√°llal; a haszn√°lat saj√°t kock√°zatra t√∂rt√©nik.
            """
        )

    with st.expander("üîê Adatv√©delem (GDPR) ‚Äì r√∂vid t√°j√©koztat√≥"):
        st.markdown(
            """
            - Az alkalmaz√°s nem gy≈±jt √©s nem t√°rol a felhaszn√°l√≥r√≥l szem√©lyes adatokat; nincs analitika vagy k√ºl√∂n napl√≥z√°s a bemenetekr≈ël a mi oldalunkon.
            - A be√≠rt k√©rd√©s √©s a kiv√°lasztott kontextus az LLM szolg√°ltat√≥ (Groq) fel√© tov√°bb√≠t√°sra ker√ºlhet az API-h√≠v√°s r√©szek√©nt feldolgoz√°s c√©lj√°b√≥l.
            - K√©rj√ºk, NE adj meg szem√©lyes adatot, k√ºl√∂nleges adatot vagy √ºzleti titkot. Ha m√©gis megadsz, az adatkezel√©s jogalapja a te kifejezett hozz√°j√°rul√°sod.
            - Az LLM-szolg√°ltat√≥ √∂n√°ll√≥ adatkezel≈ë/feldolgoz√≥ lehet; adattov√°bb√≠t√°s harmadik orsz√°gba (pl. USA) el≈ëfordulhat az infrastrukt√∫ra miatt.
            - Mi nem t√°roljuk a k√©rd√©seket; a szolg√°ltat√≥ esetleges napl√≥z√°s√°ra √©s meg≈ërz√©s√©re az ≈ë felt√©telei √©rv√©nyesek.
            - √ârintetti jogaid (hozz√°f√©r√©s, helyesb√≠t√©s, t√∂rl√©s, korl√°toz√°s, tiltakoz√°s, adathordozhat√≥s√°g) gyakorl√°s√°hoz fordulj az √ºzemeltet≈ëh√∂z √©s/vagy a szolg√°ltat√≥hoz.
            """
        )

    with st.expander("üìÑ Felhaszn√°l√°si felt√©telek (r√∂viden)"):
        st.markdown(
            """
            - A szolg√°ltat√°s "ahogy van" (AS IS) biztos√≠tott, j√≥t√°ll√°s √©s szavatoss√°g n√©lk√ºl.
            - Tilos a szolg√°ltat√°s jogellenes c√©l√∫ haszn√°lata, szem√©lyes adatok bevitele, illetve a tartalmak jogs√©rt≈ë felhaszn√°l√°sa.
            - Enged√©lyezett: kiz√°r√≥lag demo/bemutat√≥ c√©l√∫, bels≈ë tesztel√©shez k√∂t√∂tt haszn√°lat.
            - Szerz≈ëi jog: a felt√∂lt√∂tt/haszn√°lt dokumentumok jogai a jogosultakat illetik meg; az itt megjelen√≠tett r√©szletek id√©z√©sk√©nt/√∂sszefoglal√≥k√©nt szolg√°lnak.
            """
        )

    with st.expander("‚ÑπÔ∏è Pontoss√°g √©s forr√°sok"):
        st.markdown(
            """
            - A rendszer PDF-ekb≈ël k√©sz√≠t kivonatokat √©s hivatkoz√°sokat (oldalsz√°mokkal), de ez nem min≈ës√ºl hiteles kiadv√°nynak.
            - A jogszab√°lyok gyakran v√°ltoznak; mindig ellen≈ërizd a legfrissebb hivatalos sz√∂vegeket √©s publik√°ci√≥kat.
            """
        )
    
    # Alkalmaz√°s inicializ√°l√°sa ‚Äì cache kulcs a session_state-b≈ël, hogy lehessen √∫jraind√≠tani
    engine_key = st.session_state.get("engine_key", "v1")
    rag_system = initialize_rag_system(engine_key)
    initialize_app_state()

    # Dokumentumfeldolgoz√°s progressz√≠v visszajelz√©ssel, ha nincs index
    if not rag_system.documents_loaded:
        if 'doc_progress_done' not in st.session_state:
            st.session_state.doc_progress_done = False
        if not st.session_state.doc_progress_done:
            st.warning('A dokumentumok feldolgoz√°sa folyamatban van. Ez eltarthat n√©h√°ny percig...')
            progress_bar = st.progress(0, text="Feldolgoz√°s ind√≠t√°sa...")
            status_placeholder = st.empty()
            errors = []
            for progress in rag_system.process_documents_with_progress():
                if progress['total'] > 0:
                    percent = progress['current'] / progress['total']
                    progress_bar.progress(percent, text=f"{progress['current']}/{progress['total']} dokumentum feldolgozva")
                if progress['filename']:
                    msg = f"Feldolgoz√°s alatt: {progress['filename']}"
                    if progress['error']:
                        msg += f" ‚Äì Hiba: {progress['error']}"
                        errors.append(msg)
                    status_placeholder.info(msg)
                if progress['error'] and not progress['filename']:
                    status_placeholder.error(progress['error'])
            st.session_state.doc_progress_done = True
            progress_bar.empty()
            if errors:
                st.error("\n".join(errors))
            st.success("‚úÖ A dokumentumok feldolgoz√°sa befejez≈ëd√∂tt. Az alkalmaz√°s most m√°r haszn√°lhat√≥!")
            st.experimental_rerun()
        else:
            st.info('A dokumentumok feldolgoz√°sa sikeresen megt√∂rt√©nt. Friss√≠tsd az oldalt, ha nem l√°tn√°d az √∫j funkci√≥kat.')
            st.stop()

    # Sidebar - Dokumentum kezel√©s
    with st.sidebar:
        st.header("üìÑ Dokumentum Kezel√©s")
        
        # API kulcs ellen≈ërz√©se
        config = Config()
        if not config.GROQ_API_KEY or config.GROQ_API_KEY == "your_groq_api_key_here":
            st.error("‚ùå Groq API kulcs nincs be√°ll√≠tva! √Åll√≠tsd be a .env f√°jlban.")
            st.stop()
        
        # Megjelen√©s ‚Äì sz√≠ns√©ma v√°laszt√≥
        with st.expander("üé® Megjelen√©s(inakt√≠v funkci√≥)", expanded=False):
            scheme = st.selectbox("Sz√≠ns√©ma", ["K√©k", "Z√∂ld", "B√≠bor", "Narancs"], index=0)
            shades = {
                "K√©k": ("#1f4e79", "#173e60", "#12344f"),
                "Z√∂ld": ("#047857", "#065f46", "#064e3b"),
                "B√≠bor": ("#6b21a8", "#581c87", "#4c1d95"),
                "Narancs": ("#b45309", "#92400e", "#7c2d12"),
            }
            p, p600, p700 = shades.get(scheme, shades["K√©k"])
            st.markdown(
                f"""
                <style>
                :root {{ --primary: {p}; --primary-600: {p600}; --primary-700: {p700}; }}
                </style>
                """,
                unsafe_allow_html=True,
            )

        # Groq kapcsolat tesztel√©se
        with st.expander("üîß API √©s kapcsolat"):
            if st.button("Kapcsolat Tesztel√©se"):
                with st.spinner("Kapcsol√≥d√°s..."):
                    groq_client = GroqClient()
                    if groq_client.test_connection():
                        st.success("‚úÖ Groq API kapcsolat OK!")
                    else:
                        st.error("‚ùå Groq API kapcsolat hiba!")

        # F√°jl felt√∂lt√©s (tov√°bbi dokumentumokhoz)
        with st.expander("üì§ √öj PDF-ek Hozz√°ad√°sa"):
            uploaded_files = st.file_uploader(
                "V√°lassz PDF f√°jlokat a b≈ëv√≠t√©shez",
                type=['pdf'],
                accept_multiple_files=True,
                help="Ezek a dokumentumok a m√°r megl√©v≈ëkh√∂z ad√≥dnak hozz√°."
            )
            if uploaded_files and st.button("üöÄ √öj Dokumentumok Feldolgoz√°sa"):
                with st.spinner('üìñ Dokumentumok feldolgoz√°sa...'):
                    results = rag_system.add_documents(uploaded_files)
                    if results["success"]:
                        st.markdown(f'<div class="success-box">‚úÖ Sikeresen hozz√°adva {len(results["success"]) } dokumentum</div>', unsafe_allow_html=True)
                    if results["errors"]:
                        for error in results["errors"]:
                            st.markdown(f'<div class="error-box">‚ùå {error["filename"]}: {error["error"]}</div>', unsafe_allow_html=True)
                    st.rerun()

        # Keres√©si be√°ll√≠t√°sok
        with st.expander("üîé Keres√©si Be√°ll√≠t√°sok", expanded=False):
            cfg = Config()
            top_k = st.slider(
                "Top-K (visszaadott kontextus darabok sz√°ma)",
                min_value=1, max_value=20, value=cfg.TOP_K, step=1,
                help="A legrelev√°nsabb sz√∂vegr√©szletek sz√°ma, amelyet a modell kontextusk√©nt megkap."
            )

        # Rendszer statisztik√°k
        with st.expander("üìä Rendszer √Ållapot", expanded=False):
            stats = rag_system.get_stats()
            st.metric("Dokumentumok sz√°ma", stats.get("documents", 0))
            st.metric("Feldolgozott sz√∂vegr√©szletek", stats.get("chunks", 0))
            st.info(f"**√Ållapot:** {stats.get('status', 'Ismeretlen')}")
            if stats.get("document_list"):
                st.markdown("**Bet√∂lt√∂tt dokumentumok list√°ja**")
                for doc in sorted(stats["document_list"]):
                    st.write(f"‚Ä¢ {doc}")
            # RAG motor √∫jraind√≠t√°sa (cache t√∂rl√©s)
            if st.button("‚ôªÔ∏è RAG motor √∫jraind√≠t√°sa"):
                st.session_state["engine_key"] = str(time.time())
                st.rerun()
    
    # F≈ë tartalom Tabs ‚Äì K√©rdez√©s √©s El≈ëzm√©nyek
    tab_query, tab_history = st.tabs(["üí¨ K√©rdez√©s", "üí≠ El≈ëzm√©nyek"])

    with tab_query:
        st.subheader("K√©rdezz a dokumentumokr√≥l!")
        # K√©rd√©s beviteli mez≈ë
        question = st.text_area(
            "Tedd fel a k√©rd√©sedet magyarul:",
            height=100,
            placeholder="P√©ld√°ul: Hogyan rendelkezik az alapt√∂rv√©ny a polg√°rok v√°laszt√°si jogair√≥l?"
        )
        st.info("Tipp a prompthoz: l√©gy konkr√©t (jogszab√°ly/cikk/oldal), adj kontextust, √©s ker√ºld a szem√©lyes adatokat.")

        ask_button = st.button("üîç K√©rd√©s feltev√©se", type="primary", use_container_width=True)

        # K√©rd√©s feldolgoz√°sa √©s azonnali megjelen√≠t√©se
        latest_response = None
        if ask_button and question.strip():
            if not rag_system.documents_loaded:
                st.error("El≈ësz√∂r helyezz PDF f√°jlokat a 'documents/uploaded' mapp√°ba, majd ind√≠tsd √∫jra az alkalmaz√°st oldalfriss√≠t√©ssel!")
            else:
                with st.spinner('ü§î Gondolkodom √©s a v√°laszt ford√≠tom...'):
                    latest_response = rag_system.query(question, top_k=top_k)
                    st.session_state.chat_history.insert(0, {"question": question, "response": latest_response})

        # Ha most nincs friss v√°lasz, mutassuk a legut√≥bbit
        if latest_response is None and st.session_state.chat_history:
            latest_response = st.session_state.chat_history[0]["response"]

        if latest_response:
            st.markdown("---")
            st.markdown("#### V√°lasz")
            st.markdown(latest_response['answer'])
            # Let√∂lt√©s gomb
            dl_text = latest_response['answer']
            if latest_response.get('sources'):
                dl_text += "\n\nForr√°sok:\n" + "\n".join([f"- {s['document']} (oldal: {s.get('pages','-')}, relevancia: {s['relevance']})" for s in latest_response['sources']])
            st.download_button("‚¨áÔ∏è V√°lasz let√∂lt√©se (TXT)", data=dl_text, file_name="valasz.txt")

            if latest_response.get('sources'):
                st.markdown("##### Forr√°sok:")
                # K√©t has√°bos megjelen√≠t√©s nagy kijelz≈ën
                cols = st.columns(2)
                for j, source in enumerate(latest_response['sources']):
                    col = cols[j % 2]
                    page_str = source.get('pages') or "-"
                    with col:
                        st.markdown(
                            f'<div class="source-box">'
                            f'<div class="mb-1"><span class="badge badge-blue">Forr√°s {j+1}</span>'
                            f'<span class="badge badge-gray">Oldal: {page_str}</span>'
                            f'<span class="badge badge-gray">Relevancia: {source["relevance"]}</span></div>'
                            f'<strong>{source["document"]}</strong><br>'
                            f'<i>"{source["preview"]}"</i>'
                            f'</div>',
                            unsafe_allow_html=True
                        )

    with tab_history:
        if st.session_state.chat_history:
            if st.button("üóëÔ∏è El≈ëzm√©nyek t√∂rl√©se"):
                st.session_state.chat_history = []
                st.rerun()

            for i, chat in enumerate(st.session_state.chat_history):
                with st.expander(f"**K√©rd√©s #{len(st.session_state.chat_history)-i}:** {chat['question'][:80]}...", expanded=(i==0)):
                    st.markdown("##### V√°lasz:")
                    st.markdown(chat['response']['answer'])
                    if chat['response'].get('sources'):
                        st.markdown("##### Forr√°sok:")
                        for j, source in enumerate(chat['response']['sources'], 1):
                            page_str = source.get('pages') or "-"
                            st.markdown(
                                f'<div class="source-box">'
                                f'<div class="mb-1"><span class="badge badge-blue">Forr√°s {j}</span>'
                                f'<span class="badge badge-gray">Oldal: {page_str}</span>'
                                f'<span class="badge badge-gray">Relevancia: {source["relevance"]}</span></div>'
                                f'<strong>{source["document"]}</strong><br>'
                                f'<i>"{source["preview"]}"</i>'
                                f'</div>',
                                unsafe_allow_html=True
                            )

if __name__ == "__main__":
    main()